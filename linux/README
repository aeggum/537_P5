CS 537 - Operating Systems
Project 5

Name: Adam Eggum
ID: 906 075 3473
CS: eggum

Name: Matt Schleifer
ID: 906 181 8341
CS schleife

LINUX:
Our network file server does everything that is specified.  The client library 
exports the interfaces in MFS.c.  The client sends packet structures to the 
server, and the server listens on the specified port (for up to 3 seconds) until 
a method of a specified type is received.  Most of the work takes place in lfs.c.

In sending back the packet, the server uses the inum field of the server as a 
return status, and the client checks that field to determine success or failure. 

We pass all of the tests, 27 out of 27.  The runtests are saved in runtests.log.



XV6:
We haven't started on this part of the project yet, so it probably passes 2 out
of all of the tests.  Not too shabby. 





OLD README
-----------------------------------------------------------------------------------
I had some time to burn so I went through and added to the rest of mfs.c.  
Most of the file is complete now, but there are a few bits that I wasn't able to
get to.  (Such as MFS_Read(), returning the data in the right format).

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:"." 

It looks like the majority of the work is now onto LFS.c.  That will be plenty of fun...

No tests are passing, last time I ran them.  The last couple take forever so I wouldn't recommend just testing all everytime. 

client
- relatively simple
  init:
    UDP_Open();
    filling socket adr of server
    etc.
  MFS -> UDP message sends
  struct message {
  	 int type; //LOOKUP, etc.
	 maybe one message type //parameters
  };
  using select() to timeout ...
  man page ...


server
-> less simple

-> on-disk format
-> file system image init

   disk pointer => offsets in the file-system image file
   		=> disk address   

				      x		
   ------------------------------------------------------------------- >
   | CR | inode map piece 0 | 1 | ... | root inode | root dir data |
     	  0th entry: x                | addr[0]: y | "." 0, ".." 0

next goal: create file in the root directory
     new inode, update root inode, update root dir data
     ALL TO END OF LOG
     + piece of inode map (and update CR at some points)
     
after being able to create, the rest will be pretty easy. (we just need to get create)

testing:
-> don't need comm in order to test
   server: call MFS_Lookup(), etc.

while(1) {
  recv
  do 
  reply
}


for testing:
call MFS_ ...

So it looks like we're on the right track, but we're just not quite doing things
right, now I think that the problem is somewhere to do with the how the calls are
aligned (and therefore either the makefiles need to change or the way the files are
aligned needs to change.)
